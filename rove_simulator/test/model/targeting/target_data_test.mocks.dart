// Mocks generated by Mockito 5.4.5 from annotations
// in rove_simulator/test/model/targeting/target_data_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i3;

import 'package:hex_grid/hex_grid.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:rove_data_types/rove_data_types.dart' as _i7;
import 'package:rove_simulator/model/map_model.dart' as _i2;
import 'package:rove_simulator/model/persistence/saveable.dart' as _i5;
import 'package:rove_simulator/model/targeting/area_of_effect.dart' as _i11;
import 'package:rove_simulator/model/tiles/ether_node_model.dart' as _i9;
import 'package:rove_simulator/model/tiles/tile_model.dart' as _i10;
import 'package:rove_simulator/model/tiles/unit_model.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMapModel_0 extends _i1.SmartFake implements _i2.MapModel {
  _FakeMapModel_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeImage_1 extends _i1.SmartFake implements _i3.Image {
  _FakeImage_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeHexCoordinate_2 extends _i1.SmartFake implements _i4.HexCoordinate {
  _FakeHexCoordinate_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeColor_3 extends _i1.SmartFake implements _i3.Color {
  _FakeColor_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSaveData_4 extends _i1.SmartFake implements _i5.SaveData {
  _FakeSaveData_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSaveable_5 extends _i1.SmartFake implements _i5.Saveable {
  _FakeSaveable_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [UnitModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockUnitModel extends _i1.Mock implements _i6.UnitModel {
  MockUnitModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MapModel get map => (super.noSuchMethod(
        Invocation.getter(#map),
        returnValue: _FakeMapModel_0(this, Invocation.getter(#map)),
      ) as _i2.MapModel);

  @override
  List<_i7.RoveBuff> get buffs => (super.noSuchMethod(
        Invocation.getter(#buffs),
        returnValue: <_i7.RoveBuff>[],
      ) as List<_i7.RoveBuff>);

  @override
  String get className => (super.noSuchMethod(
        Invocation.getter(#className),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#className),
        ),
      ) as String);

  @override
  bool get isAdversary =>
      (super.noSuchMethod(Invocation.getter(#isAdversary), returnValue: false)
          as bool);

  @override
  bool get isAlly =>
      (super.noSuchMethod(Invocation.getter(#isAlly), returnValue: false)
          as bool);

  @override
  bool get isFlying =>
      (super.noSuchMethod(Invocation.getter(#isFlying), returnValue: false)
          as bool);

  @override
  _i7.RoundPhase get faction => (super.noSuchMethod(
        Invocation.getter(#faction),
        returnValue: _i7.RoundPhase.rover,
      ) as _i7.RoundPhase);

  @override
  _i3.Image get image => (super.noSuchMethod(
        Invocation.getter(#image),
        returnValue: _FakeImage_1(this, Invocation.getter(#image)),
      ) as _i3.Image);

  @override
  List<_i9.EtherNodeModel> get nearbyEther => (super.noSuchMethod(
        Invocation.getter(#nearbyEther),
        returnValue: <_i9.EtherNodeModel>[],
      ) as List<_i9.EtherNodeModel>);

  @override
  List<_i7.RoveGlyph> get affectingGlyphs => (super.noSuchMethod(
        Invocation.getter(#affectingGlyphs),
        returnValue: <_i7.RoveGlyph>[],
      ) as List<_i7.RoveGlyph>);

  @override
  int get defense =>
      (super.noSuchMethod(Invocation.getter(#defense), returnValue: 0) as int);

  @override
  int get damage =>
      (super.noSuchMethod(Invocation.getter(#damage), returnValue: 0) as int);

  @override
  bool get startedTurn =>
      (super.noSuchMethod(Invocation.getter(#startedTurn), returnValue: false)
          as bool);

  @override
  List<_i4.HexCoordinate> get startTurnCoordinates => (super.noSuchMethod(
        Invocation.getter(#startTurnCoordinates),
        returnValue: <_i4.HexCoordinate>[],
      ) as List<_i4.HexCoordinate>);

  @override
  bool get endedTurn =>
      (super.noSuchMethod(Invocation.getter(#endedTurn), returnValue: false)
          as bool);

  @override
  set startedTurn(bool? value) => super.noSuchMethod(
        Invocation.setter(#startedTurn, value),
        returnValueForMissingStub: null,
      );

  @override
  set endedTurn(bool? value) => super.noSuchMethod(
        Invocation.setter(#endedTurn, value),
        returnValueForMissingStub: null,
      );

  @override
  bool get isImperviousToDangerousTerrain => (super.noSuchMethod(
        Invocation.getter(#isImperviousToDangerousTerrain),
        returnValue: false,
      ) as bool);

  @override
  bool get ignoresDifficultTerrain => (super.noSuchMethod(
        Invocation.getter(#ignoresDifficultTerrain),
        returnValue: false,
      ) as bool);

  @override
  bool get focused =>
      (super.noSuchMethod(Invocation.getter(#focused), returnValue: false)
          as bool);

  @override
  set focused(bool? value) => super.noSuchMethod(
        Invocation.setter(#focused, value),
        returnValueForMissingStub: null,
      );

  @override
  _i4.HexCoordinate get coordinate => (super.noSuchMethod(
        Invocation.getter(#coordinate),
        returnValue: _FakeHexCoordinate_2(
          this,
          Invocation.getter(#coordinate),
        ),
      ) as _i4.HexCoordinate);

  @override
  set coordinate(_i4.HexCoordinate? _coordinate) => super.noSuchMethod(
        Invocation.setter(#coordinate, _coordinate),
        returnValueForMissingStub: null,
      );

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i8.dummyValue<String>(this, Invocation.getter(#name)),
      ) as String);

  @override
  String get key => (super.noSuchMethod(
        Invocation.getter(#key),
        returnValue: _i8.dummyValue<String>(this, Invocation.getter(#key)),
      ) as String);

  @override
  _i3.Color get color => (super.noSuchMethod(
        Invocation.getter(#color),
        returnValue: _FakeColor_3(this, Invocation.getter(#color)),
      ) as _i3.Color);

  @override
  _i3.Color get backgroundColor => (super.noSuchMethod(
        Invocation.getter(#backgroundColor),
        returnValue: _FakeColor_3(
          this,
          Invocation.getter(#backgroundColor),
        ),
      ) as _i3.Color);

  @override
  bool get triggersTraps =>
      (super.noSuchMethod(Invocation.getter(#triggersTraps), returnValue: false)
          as bool);

  @override
  bool get immuneToForcedMovement => (super.noSuchMethod(
        Invocation.getter(#immuneToForcedMovement),
        returnValue: false,
      ) as bool);

  @override
  bool get isSlain =>
      (super.noSuchMethod(Invocation.getter(#isSlain), returnValue: false)
          as bool);

  @override
  List<_i4.HexCoordinate> get coordinates => (super.noSuchMethod(
        Invocation.getter(#coordinates),
        returnValue: <_i4.HexCoordinate>[],
      ) as List<_i4.HexCoordinate>);

  @override
  bool get usesGlyphs =>
      (super.noSuchMethod(Invocation.getter(#usesGlyphs), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  String get saveableType => (super.noSuchMethod(
        Invocation.getter(#saveableType),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#saveableType),
        ),
      ) as String);

  @override
  String get saveableKey => (super.noSuchMethod(
        Invocation.getter(#saveableKey),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#saveableKey),
        ),
      ) as String);

  @override
  int get saveablePriority =>
      (super.noSuchMethod(Invocation.getter(#saveablePriority), returnValue: 0)
          as int);

  @override
  List<_i5.Saveable> get saveableChildren => (super.noSuchMethod(
        Invocation.getter(#saveableChildren),
        returnValue: <_i5.Saveable>[],
      ) as List<_i5.Saveable>);

  @override
  int get health =>
      (super.noSuchMethod(Invocation.getter(#health), returnValue: 0) as int);

  @override
  set health(int? _health) => super.noSuchMethod(
        Invocation.setter(#health, _health),
        returnValueForMissingStub: null,
      );

  @override
  int get maxHealth =>
      (super.noSuchMethod(Invocation.getter(#maxHealth), returnValue: 0)
          as int);

  @override
  set maxHealth(int? _maxHealth) => super.noSuchMethod(
        Invocation.setter(#maxHealth, _maxHealth),
        returnValueForMissingStub: null,
      );

  @override
  bool get testDamage =>
      (super.noSuchMethod(Invocation.getter(#testDamage), returnValue: false)
          as bool);

  @override
  set testDamage(bool? _testDamage) => super.noSuchMethod(
        Invocation.setter(#testDamage, _testDamage),
        returnValueForMissingStub: null,
      );

  @override
  bool get isTargetable =>
      (super.noSuchMethod(Invocation.getter(#isTargetable), returnValue: false)
          as bool);

  @override
  List<_i7.EncounterAction> get onSlayed => (super.noSuchMethod(
        Invocation.getter(#onSlayed),
        returnValue: <_i7.EncounterAction>[],
      ) as List<_i7.EncounterAction>);

  @override
  List<_i7.EncounterAction> get onDidStartRound => (super.noSuchMethod(
        Invocation.getter(#onDidStartRound),
        returnValue: <_i7.EncounterAction>[],
      ) as List<_i7.EncounterAction>);

  @override
  List<_i7.EncounterAction> get onWillEndRound => (super.noSuchMethod(
        Invocation.getter(#onWillEndRound),
        returnValue: <_i7.EncounterAction>[],
      ) as List<_i7.EncounterAction>);

  @override
  int get reducePushPullBy =>
      (super.noSuchMethod(Invocation.getter(#reducePushPullBy), returnValue: 0)
          as int);

  @override
  bool isAllyToUnit(_i6.UnitModel? unit) => (super.noSuchMethod(
        Invocation.method(#isAllyToUnit, [unit]),
        returnValue: false,
      ) as bool);

  @override
  bool isEnemyToUnit(_i6.UnitModel? unit) => (super.noSuchMethod(
        Invocation.method(#isEnemyToUnit, [unit]),
        returnValue: false,
      ) as bool);

  @override
  int affinityForEther(_i7.Ether? ether) => (super.noSuchMethod(
        Invocation.method(#affinityForEther, [ether]),
        returnValue: 0,
      ) as int);

  @override
  (_i7.Ether, int) rollDamageAndResolveAffinity() => (super.noSuchMethod(
        Invocation.method(#rollDamageAndResolveAffinity, []),
        returnValue: (_i7.Ether.wind, 0),
      ) as (_i7.Ether, int));

  @override
  void resetRound() => super.noSuchMethod(
        Invocation.method(#resetRound, []),
        returnValueForMissingStub: null,
      );

  @override
  dynamic setSaveablePropertiesBeforeChildren(
    Map<String, dynamic>? properties,
  ) =>
      super.noSuchMethod(
        Invocation.method(#setSaveablePropertiesBeforeChildren, [properties]),
      );

  @override
  Map<String, dynamic> saveableProperties() => (super.noSuchMethod(
        Invocation.method(#saveableProperties, []),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  List<(int, int)> cubeVectorsForCoordinates() => (super.noSuchMethod(
        Invocation.method(#cubeVectorsForCoordinates, []),
        returnValue: <(int, int)>[],
      ) as List<(int, int)>);

  @override
  List<_i4.HexCoordinate> originCoordinatesToOccupyCoordinate(
    _i4.HexCoordinate? coordinate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#originCoordinatesToOccupyCoordinate, [
          coordinate,
        ]),
        returnValue: <_i4.HexCoordinate>[],
      ) as List<_i4.HexCoordinate>);

  @override
  List<_i4.HexCoordinate> coordinatesAtOrigin(_i4.HexCoordinate? origin) =>
      (super.noSuchMethod(
        Invocation.method(#coordinatesAtOrigin, [origin]),
        returnValue: <_i4.HexCoordinate>[],
      ) as List<_i4.HexCoordinate>);

  @override
  int distanceToCoordinate(
    _i4.HexCoordinate? to, {
    _i4.HexCoordinate? origin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#distanceToCoordinate, [to], {#origin: origin}),
        returnValue: 0,
      ) as int);

  @override
  _i4.HexCoordinate closestCoordinateOfTarget(
    _i10.TileModel? target, {
    required _i4.HexCoordinate? origin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #closestCoordinateOfTarget,
          [target],
          {#origin: origin},
        ),
        returnValue: _FakeHexCoordinate_2(
          this,
          Invocation.method(
            #closestCoordinateOfTarget,
            [target],
            {#origin: origin},
          ),
        ),
      ) as _i4.HexCoordinate);

  @override
  int distanceToTarget(_i10.TileModel? target, {_i4.HexCoordinate? origin}) =>
      (super.noSuchMethod(
        Invocation.method(#distanceToTarget, [target], {#origin: origin}),
        returnValue: 0,
      ) as int);

  @override
  int distanceToAOE(_i11.AreaOfEffect? aoe, {_i4.HexCoordinate? origin}) =>
      (super.noSuchMethod(
        Invocation.method(#distanceToAOE, [aoe], {#origin: origin}),
        returnValue: 0,
      ) as int);

  @override
  void addListener(_i3.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(#addListener, [listener]),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i3.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(#removeListener, [listener]),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(#dispose, []),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(#notifyListeners, []),
        returnValueForMissingStub: null,
      );

  @override
  dynamic initializeWithSaveData(_i5.SaveData? data) =>
      super.noSuchMethod(Invocation.method(#initializeWithSaveData, [data]));

  @override
  _i5.SaveData toSaveData() => (super.noSuchMethod(
        Invocation.method(#toSaveData, []),
        returnValue: _FakeSaveData_4(
          this,
          Invocation.method(#toSaveData, []),
        ),
      ) as _i5.SaveData);

  @override
  dynamic setSaveablePropertiesAfterChildren(
    Map<String, dynamic>? properties,
  ) =>
      super.noSuchMethod(
        Invocation.method(#setSaveablePropertiesAfterChildren, [properties]),
      );

  @override
  _i5.Saveable createSaveableChild(_i5.SaveData? childData) =>
      (super.noSuchMethod(
        Invocation.method(#createSaveableChild, [childData]),
        returnValue: _FakeSaveable_5(
          this,
          Invocation.method(#createSaveableChild, [childData]),
        ),
      ) as _i5.Saveable);

  @override
  int resolveHeal(int? amount) => (super.noSuchMethod(
        Invocation.method(#resolveHeal, [amount]),
        returnValue: 0,
      ) as int);

  @override
  int sufferDamage(int? amount) => (super.noSuchMethod(
        Invocation.method(#sufferDamage, [amount]),
        returnValue: 0,
      ) as int);

  @override
  int resolveAttack(int? amount, {bool? pierce = false}) => (super.noSuchMethod(
        Invocation.method(#resolveAttack, [amount], {#pierce: pierce}),
        returnValue: 0,
      ) as int);
}
