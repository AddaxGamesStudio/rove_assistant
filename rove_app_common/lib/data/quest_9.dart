import 'dart:ui';

import 'package:rove_app_common/data/encounter_def_utils.dart';
import 'package:rove_data_types/rove_data_types.dart';

extension Quest9 on EncounterDef {
  static EncounterDef get encounter9dot1a => EncounterDef(
        questId: '9',
        number: '1a',
        title: 'How Wide Was It',
        victoryDescription: 'Slay the Battering Winds.',
        lossDescription: 'Lose if Ozendyn is slain.',
        roundLimit: 8,
        baseLystReward: 30,
        milestone: CampaignMilestone.milestone9dot1,
        challenges: [
          'The Battering Winds has +4*R [HP].',
          'When the Battering Winds attacks a Rover, they must drain all [Wind] and [Water] ether dice in their personal or infusion pools.',
          'Rovers can’t benefit from the effects of [Wind] nodes and can’t take ether dice from them. Adversaries are affected by [Wind] nodes when within [Range] 1-2.',
        ],
        onLoad: [
          rules('Ozendyn',
              '''Ozendeyn is a character ally to Rovers. For this encounter Ozendyn will only use the “Picket” side and will not flip.'''),
        ],
        startingMap: MapDef(
          id: '9.1.a',
          columnCount: 13,
          rowCount: 11,
          backgroundRect: Rect.fromLTWH(125.0, 44.0, 1481.0, 1411.0),
          starts: [
            (1, 10),
            (3, 10),
            (5, 10),
            (7, 10),
            (11, 10),
          ],
          terrain: {
            (0, 6): TerrainType.dangerous,
            (0, 8): TerrainType.object,
            (1, 1): TerrainType.object,
            (1, 4): TerrainType.object,
            (3, 0): TerrainType.dangerous,
            (3, 5): TerrainType.object,
            (3, 8): TerrainType.difficult,
            (4, 2): TerrainType.difficult,
            (4, 5): TerrainType.object,
            (6, 0): TerrainType.difficult,
            (6, 8): TerrainType.object,
            (7, 6): TerrainType.difficult,
            (8, 3): TerrainType.object,
            (9, 7): TerrainType.object,
            (10, 1): TerrainType.object,
            (10, 6): TerrainType.object,
            (10, 8): TerrainType.dangerous,
            (11, 4): TerrainType.dangerous,
          },
        ),
        allies: [
          AllyDef(name: 'Ozendyn', cardId: 'A-015', behaviors: [
            EncounterFigureDef(
              name: 'Picket',
              health: 11,
              affinities: {
                Ether.wind: -1,
                Ether.morph: -1,
                Ether.earth: 1,
                Ether.crux: 1,
              },
              abilities: [
                AbilityDef(name: 'Ability', actions: [
                  RoveAction.move(4, exclusiveGroup: 1),
                  RoveAction.meleeAttack(3, exclusiveGroup: 1),
                  RoveAction.move(2, exclusiveGroup: 2),
                  RoveAction.rangeAttack(2, endRange: 3, exclusiveGroup: 2),
                ]),
              ],
              reactions: [
                EnemyReactionDef(
                    trigger: ReactionTriggerDef(
                        type: RoveEventType.afterSlain,
                        targetKind: TargetKind.enemy,
                        condition: MatchesCondition('Stomaw')),
                    actions: [RoveAction.heal(1, endRange: 1)])
              ],
              onSlain: [fail()],
            ),
          ])
        ],
        adversaries: [
          EncounterFigureDef(
            name: 'Galeaper',
            letter: 'A',
            health: 8,
            flies: true,
            affinities: {
              Ether.fire: -1,
              Ether.earth: -1,
              Ether.wind: 3,
              Ether.morph: 1,
            },
          ),
          EncounterFigureDef(
            name: 'Streak',
            letter: 'B',
            health: 8,
            flies: true,
            affinities: {
              Ether.earth: -1,
              Ether.crux: 1,
              Ether.wind: 2,
            },
          ),
          EncounterFigureDef(
            name: 'Kifa',
            letter: 'C',
            health: 8,
            flies: true,
            affinities: {
              Ether.fire: -1,
              Ether.water: -1,
              Ether.wind: 2,
              Ether.earth: 2,
            },
          ),
          EncounterFigureDef(
            name: 'Battering Winds',
            letter: 'D',
            type: AdversaryType.miniboss,
            healthFormula: '8*R',
            flies: true,
            traits: [
              'This unit gains [DEF] 2 against melee attacks targeting it.',
            ],
            affinities: {
              Ether.earth: -2,
              Ether.fire: -1,
              Ether.morph: 1,
              Ether.water: 1,
              Ether.wind: 2,
              Ether.crux: 2,
            },
          ),
        ],
        placements: [
          PlacementDef(name: 'Galeaper', c: 2, r: 3),
          PlacementDef(name: 'Galeaper', c: 7, r: 5, minPlayers: 3),
          PlacementDef(name: 'Galeaper', c: 11, r: 2),
          PlacementDef(name: 'Galeaper', c: 4, r: 0, minPlayers: 4),
          PlacementDef(name: 'Streak', c: 7, r: 3),
          PlacementDef(name: 'Streak', c: 9, r: 4),
          PlacementDef(name: 'Streak', c: 12, r: 0, minPlayers: 4),
          PlacementDef(name: 'Streak', c: 0, r: 5),
          PlacementDef(name: 'Streak', c: 0, r: 0, minPlayers: 3),
          PlacementDef(name: 'Kifa', c: 1, r: 2),
          PlacementDef(name: 'Kifa', c: 5, r: 3),
          PlacementDef(name: 'Kifa', c: 5, r: 5, minPlayers: 3),
          PlacementDef(name: 'Kifa', c: 8, r: 0, minPlayers: 4),
          PlacementDef(name: 'Kifa', c: 11, r: 6),
          PlacementDef(name: 'Battering Winds', c: 6, r: 2, onSlain: [
            codex('Wait, Where is Mo?'),
            victory(),
          ]),
          PlacementDef(name: 'wind', type: PlacementType.ether, c: 1, r: 4),
          PlacementDef(name: 'wind', type: PlacementType.ether, c: 10, r: 1),
          PlacementDef(name: 'wind', type: PlacementType.ether, c: 6, r: 8),
        ],
      );

  static EncounterDef get encounter9dot1b => EncounterDef(
        questId: '9',
        number: '1b',
        title: 'How Deep Was It',
        victoryDescription: 'Slay the Final Cut.',
        roundLimit: 8,
        baseLystReward: 30,
        milestone: CampaignMilestone.milestone9dot1,
        challenges: [
          'The Final Cut gains +2 movement points to all of their movement actions.',
          'Ashemaks gain +2 [DEF].',
          'Adversaries are immune to the effects of [Morph] nodes. Rovers can not take ether dice from [Morph] nodes and are affected by them while within [Range] 1-2.',
        ],
        startingMap: MapDef(
          id: '9.1.b',
          columnCount: 13,
          rowCount: 11,
          backgroundRect: Rect.fromLTWH(110.0, 44.0, 1481.0, 1411.0),
          starts: [
            (1, 10),
            (3, 10),
            (5, 10),
            (7, 10),
            (11, 10),
          ],
          terrain: {
            (1, 4): TerrainType.dangerous,
            (2, 1): TerrainType.object,
            (2, 6): TerrainType.object,
            (2, 8): TerrainType.dangerous,
            (3, 7): TerrainType.object,
            (4, 3): TerrainType.object,
            (5, 6): TerrainType.difficult,
            (6, 0): TerrainType.difficult,
            (6, 8): TerrainType.object,
            (8, 2): TerrainType.difficult,
            (8, 5): TerrainType.object,
            (9, 0): TerrainType.dangerous,
            (9, 5): TerrainType.object,
            (9, 8): TerrainType.difficult,
            (11, 1): TerrainType.object,
            (11, 4): TerrainType.object,
            (11, 7): TerrainType.dangerous,
            (12, 8): TerrainType.object,
          },
        ),
        adversaries: [
          EncounterFigureDef(
            name: 'Final Cut',
            letter: 'A',
            type: AdversaryType.miniboss,
            healthFormula: '10*R',
            immuneToForcedMovement: true,
            traits: [
              'This unit gains [DEF] 2 against ranged attacks targeting it.',
            ],
            affinities: {
              Ether.morph: 3,
              Ether.earth: 3,
              Ether.fire: 2,
              Ether.crux: -1,
              Ether.wind: -1,
            },
          ),
          EncounterFigureDef(
            name: 'Ashemak',
            letter: 'B',
            health: 9,
            immuneToForcedMovement: true,
            traits: [
              'Before this unit is slain, all units within [Range] 1 suffer [DMG]3.',
            ],
            affinities: {
              Ether.fire: 3,
              Ether.wind: -1,
              Ether.water: -2,
            },
          ),
          EncounterFigureDef(
            name: 'Wrathbone',
            letter: 'C',
            health: 20,
            traits: [
              '[React] At the end of the Rover phase: All enemies within [Range] 1-2 suffer [DMG]1. << Enemies within [Range] 1 suffer an additional [DMG]1.',
            ],
            affinities: {
              Ether.water: -2,
              Ether.fire: 2,
              Ether.earth: 1,
            },
          ),
          EncounterFigureDef(
            name: 'Dyad',
            letter: 'D',
            health: 16,
            affinities: {
              Ether.crux: 2,
              Ether.water: 1,
              Ether.morph: -2,
            },
          ),
        ],
        placements: [
          PlacementDef(name: 'Final Cut', c: 6, r: 2, onSlain: [
            codex('Wait, Where is Mo?'),
            victory(),
          ]),
          PlacementDef(name: 'Ashemak', c: 4, r: 2, minPlayers: 3),
          PlacementDef(name: 'Ashemak', c: 10, r: 2, minPlayers: 4),
          PlacementDef(name: 'Ashemak', c: 11, r: 6),
          PlacementDef(name: 'Ashemak', c: 1, r: 6),
          PlacementDef(name: 'Wrathbone', c: 8, r: 4),
          PlacementDef(name: 'Wrathbone', c: 1, r: 2, minPlayers: 3),
          PlacementDef(name: 'Dyad', c: 4, r: 4),
          PlacementDef(name: 'Dyad', c: 7, r: 1),
          PlacementDef(name: 'morph', type: PlacementType.ether, c: 6, r: 8),
          PlacementDef(name: 'morph', type: PlacementType.ether, c: 11, r: 4),
          PlacementDef(name: 'morph', type: PlacementType.ether, c: 2, r: 1),
        ],
      );

  static EncounterDef get encounter9dot2 => EncounterDef(
        questId: '9',
        number: '2',
        title: 'The Amber of This Moment',
        victoryDescription: 'Free Mo from their cage.',
        roundLimit: 8,
        baseLystReward: 15,
        unlocksRoverLevel: 9,
        milestone: CampaignMilestone.milestone9dot2,
        challenges: [
          'Set the Round Limit to 6.',
          'The Warden gains +2 [DEF].',
          'Briarwogs and streaks gain +1 [DMG] to all of their attacks.'
        ],
        trackerEvents: [
          EncounterTrackerEventDef(
              title:
                  'Tick this if the Rover with the “Cage Key” is within [Range] 1 of cage [A] at the end of the round',
              ifMilestone: '_warden_slain',
              recordMilestone: '_victory'),
        ],
        onLoad: [
          rules('Caged Starling',
              '''Mo has been captured by the Star Hunters. The Warden will execute Mo soon and take their shard for themselves. There are several ways to free Mo. Pick the path that best suits your team composition.'''),
          rules('Clear the Camp',
              '''Slay all the enemies. If all adversaries are slain, you have the freedom to uncage Mo with no threat of retaliation.'''),
          rules('Uncage Mo',
              '''Slay the Warden, take the cage key from them, then move to within [Range] 1 of cage [A] to open it and free Mo.'''),
          rules('Sunder the Cage',
              '''Open the cage by force and flee with Mo. Cage [A] is a special object and has R*5 [HP] and [DEF] 4. Rovers treat the cage as an enemy and no faction treats it as an ally.'''),
        ],
        onMilestone: {
          '_victory': [
            codex('Let\'s Get You Out of Here'),
            victory(),
          ],
          '_warden_slain': [
            codex('Cage Master'),
            item('Metal Key'),
          ],
        },
        startingMap: MapDef(
          id: '9.2',
          columnCount: 13,
          rowCount: 11,
          backgroundRect: Rect.fromLTWH(125.0, 44.0, 1481.0, 1411.0),
          starts: [
            (3, 10),
            (4, 9),
            (5, 10),
            (6, 9),
            (7, 10),
            (8, 9),
            (9, 10),
          ],
          terrain: {
            (0, 5): TerrainType.object,
            (0, 6): TerrainType.object,
            (1, 1): TerrainType.object,
            (1, 2): TerrainType.object,
            (1, 4): TerrainType.object,
            (1, 6): TerrainType.object,
            (1, 10): TerrainType.object,
            (2, 1): TerrainType.object,
            (2, 9): TerrainType.object,
            (3, 3): TerrainType.object,
            (3, 4): TerrainType.object,
            (3, 9): TerrainType.object,
            (4, 3): TerrainType.object,
            (5, 0): TerrainType.object,
            (5, 2): TerrainType.object,
            (5, 5): TerrainType.barrier,
            (6, 0): TerrainType.object,
            (6, 4): TerrainType.barrier,
            (6, 5): TerrainType.barrier,
            (7, 0): TerrainType.object,
            (7, 5): TerrainType.barrier,
            (9, 2): TerrainType.object,
            (9, 9): TerrainType.object,
            (10, 0): TerrainType.object,
            (10, 9): TerrainType.object,
            (11, 1): TerrainType.object,
            (11, 10): TerrainType.object,
            (12, 0): TerrainType.object,
            (12, 2): TerrainType.object,
            (12, 3): TerrainType.object,
          },
        ),
        overlays: [
          EncounterFigureDef(
            name: 'Cage',
            healthFormula: '5*R',
            defense: 4,
          )
        ],
        adversaries: [
          EncounterFigureDef(
            name: 'Streak',
            letter: 'A',
            health: 8,
            flies: true,
            affinities: {
              Ether.wind: 2,
              Ether.earth: 1,
              Ether.water: -2,
            },
            onSlain: [
              milestone('_victory', condition: AllAdversariesSlainCondition()),
            ],
          ),
          EncounterFigureDef(
            name: 'Wrathbone',
            letter: 'B',
            health: 20,
            traits: [
              '[React] At the end of the Rover phase: All enemies within [Range] 1-2 suffer [DMG]1. << Enemies within [Range] 1 suffer an additional [DMG]1.',
            ],
            affinities: {
              Ether.fire: 2,
              Ether.earth: 1,
              Ether.water: -2,
            },
            onSlain: [
              milestone('_victory', condition: AllAdversariesSlainCondition()),
            ],
          ),
          EncounterFigureDef(
            name: 'Harrow',
            letter: 'C',
            health: 18,
            affinities: {
              Ether.morph: 2,
              Ether.crux: 2,
            },
            onSlain: [
              milestone('_victory', condition: AllAdversariesSlainCondition()),
            ],
          ),
          EncounterFigureDef(
            name: 'Stormcaller',
            letter: 'D',
            health: 15,
            flies: true,
            traits: [
              'This unit gains [DEF] 2 against [r_attack] targeting it.',
            ],
            affinities: {
              Ether.wind: 2,
              Ether.crux: 2,
              Ether.water: 1,
              Ether.morph: -1,
              Ether.fire: -1,
              Ether.earth: -2,
            },
            onSlain: [
              milestone('_victory', condition: AllAdversariesSlainCondition()),
            ],
          ),
          EncounterFigureDef(
            name: 'Briarwog',
            letter: 'E',
            health: 10,
            traits: [
              '[React] After this unit is attacked from within [Range] 1: The attacker suffers [DMG]1.',
            ],
            affinities: {
              Ether.water: 2,
              Ether.morph: 1,
              Ether.earth: -1,
              Ether.fire: -1,
            },
            onSlain: [
              milestone('_victory', condition: AllAdversariesSlainCondition()),
            ],
          ),
          EncounterFigureDef(
            name: 'Warden',
            letter: 'F',
            type: AdversaryType.miniboss,
            health: 15,
            affinities: {
              Ether.wind: 2,
              Ether.water: 2,
              Ether.earth: -1,
              Ether.fire: -1,
            },
            onSlain: [
              milestone('_victory', condition: AllAdversariesSlainCondition()),
              milestone('_warden_slain',
                  condition: MilestoneCondition('_victory', value: false)),
            ],
          ),
        ],
        placements: [
          PlacementDef(name: 'Streak', c: 8, r: 3, minPlayers: 3),
          PlacementDef(name: 'Streak', c: 10, r: 4),
          PlacementDef(name: 'Streak', c: 11, r: 4),
          PlacementDef(name: 'Wrathbone', c: 3, r: 5),
          PlacementDef(name: 'Wrathbone', c: 0, r: 8, minPlayers: 3),
          PlacementDef(name: 'Harrow', c: 2, r: 6),
          PlacementDef(name: 'Harrow', c: 4, r: 1, minPlayers: 4),
          PlacementDef(name: 'Stormcaller', c: 12, r: 1, minPlayers: 4),
          PlacementDef(name: 'Stormcaller', c: 12, r: 5),
          PlacementDef(name: 'Briarwog', c: 3, r: 0),
          PlacementDef(name: 'Briarwog', c: 9, r: 0),
          PlacementDef(
              name: 'Cage',
              type: PlacementType.object,
              c: 6,
              r: 0,
              onSlain: [
                milestone('_victory'),
              ]),
          PlacementDef(name: 'Briarwog', c: 6, r: 2, minPlayers: 3),
          PlacementDef(name: 'Warden', c: 7, r: 1),
          PlacementDef(name: 'wind', type: PlacementType.ether, c: 5, r: 2),
          PlacementDef(name: 'wind', type: PlacementType.ether, c: 9, r: 2),
          PlacementDef(name: 'fire', type: PlacementType.ether, c: 1, r: 4),
        ],
      );

  static EncounterDef get encounter9dot3 => EncounterDef(
        questId: '9',
        number: '3',
        title: 'What do the Birds Say?',
        victoryDescription: 'Slay all adversaries.',
        roundLimit: 8,
        baseLystReward: 20,
        challenges: [
          'Courslayers gain +1 [DMG] to all of their attacks.',
          'Grovetenders have +6*R [HP].',
          'Rovers can’t benefit from the effects of [Earth] nodes and can’t take ether dice from them. Adversaries are affected by [Earth] nodes when within [Range] 1-2.',
        ],
        onLoad: [
          rules('Ambush',
              'You have been ambushed by the Star Hunters. In this encounter, the Adversary faction gains priority before the Rover faction.'),
        ],
        onMilestone: {
          '_victory': [
            codex('This is Bad'),
            victory(),
          ],
        },
        startingMap: MapDef(
          id: '9.3',
          columnCount: 13,
          rowCount: 11,
          backgroundRect: Rect.fromLTWH(110.0, 44.0, 1481.0, 1411.0),
          starts: [
            (6, 2),
            (6, 3),
            (6, 4),
            (6, 5),
            (6, 6),
            (6, 7),
          ],
          terrain: {
            (1, 2): TerrainType.object,
            (1, 5): TerrainType.object,
            (3, 1): TerrainType.object,
            (3, 7): TerrainType.object,
            (3, 8): TerrainType.object,
            (4, 3): TerrainType.difficult,
            (4, 4): TerrainType.difficult,
            (4, 5): TerrainType.difficult,
            (4, 7): TerrainType.object,
            (6, 9): TerrainType.object,
            (8, 0): TerrainType.difficult,
            (8, 3): TerrainType.object,
            (8, 4): TerrainType.difficult,
            (8, 5): TerrainType.object,
            (8, 8): TerrainType.difficult,
            (9, 2): TerrainType.object,
            (10, 1): TerrainType.object,
            (10, 2): TerrainType.object,
            (10, 5): TerrainType.object,
            (11, 8): TerrainType.object,
          },
        ),
        adversaries: [
          EncounterFigureDef(
            name: 'Briarwog',
            letter: 'A',
            health: 10,
            traits: [
              '[React] After this unit is attacked from within [Range] 1: The attacker suffers [DMG]1.',
            ],
            affinities: {
              Ether.earth: -1,
              Ether.fire: -1,
              Ether.morph: 1,
              Ether.water: 2,
            },
            onSlain: [
              milestone('_victory', condition: AllAdversariesSlainCondition()),
            ],
          ),
          EncounterFigureDef(
            name: 'Grovetender',
            letter: 'B',
            health: 12,
            defense: 2,
            traits: [
              ' If a Rover slays this unit, that Rover [plus_water_earth].',
            ],
            affinities: {
              Ether.earth: 3,
              Ether.water: 3,
              Ether.fire: -1,
              Ether.morph: -1,
            },
            onSlain: [
              milestone('_victory', condition: AllAdversariesSlainCondition()),
            ],
          ),
          EncounterFigureDef(
            name: 'Courslayer',
            letter: 'C',
            health: 15,
            affinities: {
              Ether.earth: -1,
              Ether.fire: -1,
              Ether.wind: 2,
              Ether.water: 2,
            },
            onSlain: [
              codex('Trained Killer'),
              milestone('_victory', condition: AllAdversariesSlainCondition()),
            ],
          ),
        ],
        placements: const [
          PlacementDef(name: 'Briarwog', c: 4, r: 9),
          PlacementDef(name: 'Briarwog', c: 8, r: 9),
          PlacementDef(name: 'Briarwog', c: 11, r: 7, minPlayers: 3),
          PlacementDef(name: 'Briarwog', c: 1, r: 7, minPlayers: 3),
          PlacementDef(name: 'Grovetender', c: 6, r: 0),
          PlacementDef(name: 'Grovetender', c: 4, r: 0, minPlayers: 3),
          PlacementDef(name: 'Courslayer', c: 0, r: 3, minPlayers: 4),
          PlacementDef(name: 'Courslayer', c: 2, r: 4),
          PlacementDef(name: 'Courslayer', c: 10, r: 4),
          PlacementDef(name: 'Courslayer', c: 12, r: 3, minPlayers: 4),
          PlacementDef(name: 'earth', type: PlacementType.ether, c: 1, r: 5),
          PlacementDef(name: 'earth', type: PlacementType.ether, c: 3, r: 1),
          PlacementDef(name: 'earth', type: PlacementType.ether, c: 10, r: 5),
          PlacementDef(name: 'earth', type: PlacementType.ether, c: 6, r: 9),
        ],
      );

  static EncounterDef get encounter9dot4 => EncounterDef(
        questId: '9',
        number: '4',
        title: 'Feet of Lead, Wings of Tin',
        victoryDescription: 'Escape the Eclipse.',
        roundLimit: 8,
        baseLystReward: 20,
        challenges: [
          'Courslayers gain +1 [DMG] to all of their attacks.',
          'Harrows gain +1 movement points to all of their movement actions.',
          'Stormcallers gain +2 [Range] to all of their attacks.',
        ],
        onLoad: [
          rules('Eclipse',
              '''The Eclipse is the cruel and greedy leader of the Star Hunters, who rides upon his primal worg, Andiron. While within the ruins of Era, and the magics of the starling cores, the Eclipse is practically invulnerable. You can’t win this fight. Flee to the exit spaces quickly.'''),
        ],
        onMilestone: {
          '_victory': [
            codex('We Better Move Quickly'),
            victory(),
          ],
        },
        startingMap: MapDef(
          id: '9.4',
          columnCount: 13,
          rowCount: 11,
          backgroundRect: Rect.fromLTWH(125.0, 44.0, 1481.0, 1411.0),
          starts: [
            (3, 6),
            (3, 7),
            (3, 8),
            (4, 6),
            (4, 7),
            (4, 8),
          ],
          exits: [
            (0, 0),
            (0, 1),
            (1, 0),
            (1, 1),
            (1, 2),
          ],
          terrain: {
            (0, 2): TerrainType.barrier,
            (0, 3): TerrainType.barrier,
            (0, 4): TerrainType.barrier,
            (0, 5): TerrainType.barrier,
            (1, 3): TerrainType.barrier,
            (1, 4): TerrainType.barrier,
            (1, 5): TerrainType.barrier,
            (1, 6): TerrainType.barrier,
            (2, 2): TerrainType.barrier,
            (2, 3): TerrainType.barrier,
            (2, 4): TerrainType.barrier,
            (2, 5): TerrainType.barrier,
            (3, 0): TerrainType.difficult,
            (3, 1): TerrainType.difficult,
            (3, 2): TerrainType.barrier,
            (3, 3): TerrainType.barrier,
            (3, 4): TerrainType.barrier,
            (3, 5): TerrainType.barrier,
            (4, 2): TerrainType.barrier,
            (4, 3): TerrainType.barrier,
            (4, 4): TerrainType.barrier,
            (4, 5): TerrainType.barrier,
            (5, 2): TerrainType.object,
            (5, 3): TerrainType.barrier,
            (5, 4): TerrainType.barrier,
            (5, 5): TerrainType.barrier,
            (5, 9): TerrainType.barrier,
            (5, 10): TerrainType.barrier,
            (6, 2): TerrainType.barrier,
            (6, 3): TerrainType.barrier,
            (6, 4): TerrainType.barrier,
            (6, 8): TerrainType.barrier,
            (6, 9): TerrainType.barrier,
            (7, 2): TerrainType.barrier,
            (7, 3): TerrainType.barrier,
            (7, 4): TerrainType.barrier,
            (7, 5): TerrainType.object,
            (7, 8): TerrainType.barrier,
            (7, 9): TerrainType.barrier,
            (7, 10): TerrainType.barrier,
            (8, 2): TerrainType.barrier,
            (8, 3): TerrainType.barrier,
            (8, 4): TerrainType.barrier,
            (8, 5): TerrainType.barrier,
            (8, 8): TerrainType.barrier,
            (8, 9): TerrainType.barrier,
            (9, 2): TerrainType.barrier,
            (9, 3): TerrainType.barrier,
            (9, 4): TerrainType.barrier,
            (9, 5): TerrainType.barrier,
            (9, 6): TerrainType.barrier,
            (9, 9): TerrainType.barrier,
            (9, 10): TerrainType.barrier,
            (10, 4): TerrainType.difficult,
            (10, 9): TerrainType.object,
            (11, 4): TerrainType.object,
            (11, 10): TerrainType.difficult,
            (12, 4): TerrainType.difficult,
            (12, 9): TerrainType.difficult,
          },
        ),
        adversaries: [
          EncounterFigureDef(
            name: 'Harrow',
            letter: 'A',
            health: 18,
            affinities: {
              Ether.morph: 2,
              Ether.crux: 2,
            },
          ),
          EncounterFigureDef(
            name: 'Stormcaller',
            letter: 'B',
            health: 15,
            flies: true,
            traits: [
              'This unit gains [DEF] 2 against [r_attack] targeting it.',
            ],
            affinities: {
              Ether.wind: 2,
              Ether.crux: 2,
              Ether.water: 1,
              Ether.morph: -1,
              Ether.fire: -1,
              Ether.earth: -2,
            },
          ),
          EncounterFigureDef(
            name: 'Courslayer',
            letter: 'C',
            health: 15,
            affinities: {
              Ether.earth: -1,
              Ether.fire: -1,
              Ether.water: 2,
              Ether.wind: 2,
            },
          ),
          EncounterFigureDef(
            name: 'Eclipse',
            letter: 'D ',
            type: AdversaryType.boss,
            healthFormula: '20*R',
            defenseFormula: '2',
            large: true,
            unslayable: true,
            traits: [
              'This unit is immune to all damage.',
            ],
            affinities: {
              Ether.earth: 1,
              Ether.fire: 1,
              Ether.wind: 1,
              Ether.water: 1,
              Ether.crux: 2,
              Ether.morph: 2,
            },
          ),
        ],
        placements: const [
          PlacementDef(name: 'Harrow', c: 7, r: 7),
          PlacementDef(name: 'Harrow', c: 7, r: 6, minPlayers: 3),
          PlacementDef(name: 'Harrow', c: 10, r: 7, minPlayers: 4),
          PlacementDef(name: 'Harrow', c: 7, r: 1, minPlayers: 4),
          PlacementDef(name: 'Stormcaller', c: 2, r: 0),
          PlacementDef(name: 'Stormcaller', c: 2, r: 1, minPlayers: 3),
          PlacementDef(name: 'Courslayer', c: 9, r: 0, minPlayers: 4),
          PlacementDef(name: 'Courslayer', c: 11, r: 0),
          PlacementDef(name: 'Courslayer', c: 12, r: 0, minPlayers: 3),
          PlacementDef(name: 'Eclipse', c: 1, r: 10),
          PlacementDef(
              name: 'Magic',
              type: PlacementType.trap,
              c: 10,
              r: 6,
              trapDamage: 3),
          PlacementDef(
              name: 'Magic',
              type: PlacementType.trap,
              c: 10,
              r: 8,
              trapDamage: 3),
          PlacementDef(
              name: 'Magic',
              type: PlacementType.trap,
              c: 11,
              r: 2,
              trapDamage: 3),
          PlacementDef(
              name: 'Magic',
              type: PlacementType.trap,
              c: 4,
              r: 0,
              trapDamage: 3),
          PlacementDef(
              name: 'Magic',
              type: PlacementType.trap,
              c: 4,
              r: 1,
              trapDamage: 3),
          PlacementDef(name: 'wind', type: PlacementType.ether, c: 5, r: 2),
          PlacementDef(name: 'wind', type: PlacementType.ether, c: 7, r: 5),
          PlacementDef(name: 'wind', type: PlacementType.ether, c: 11, r: 4),
          PlacementDef(name: 'wind', type: PlacementType.ether, c: 10, r: 9),
        ],
      );

  static EncounterDef get encounter9dot5 => EncounterDef(
        questId: '9',
        number: '5',
        title: 'Requirements of Chaos',
        victoryDescription: 'Find three starling shards.',
        roundLimit: 6,
        baseLystReward: 20,
        challenges: [
          'During the end phase of each round, Rovers must drain one non-[DIM] dice in their personal or infusion pool.',
          'Rovers remove all ether dice from their personal and infusion pools when transitioning into a new area.',
          'The [mini-boss] in the final area gains +5*R [HP] and +1 [DMG] to all of their attacks.',
        ],
        trackerEvents: [
          EncounterTrackerEventDef(
              title:
                  'Tick this if one Rover ends the round within [Range] 1 of the Reliquary [A]',
              ifMilestone: '_selected_reliquary',
              recordMilestone: '_reliquary_completed'),
          EncounterTrackerEventDef(
              title:
                  'Tick this if one Rover ends the round within [Range] 1 of the Archive [A]',
              ifMilestone: '_selected_archives',
              recordMilestone: '_archives_completed'),
          EncounterTrackerEventDef(
              title:
                  'Tick this if one Rover ends the round within [Range] 1 of grave marker [A]',
              ifMilestone: '_selected_mausoleum',
              recordMilestone: '_mausoleum_completed'),
        ],
        dialogs: [
          EncounterDialogDef(
              title: 'Choose First Area',
              body:
                  '''There are three different areas to explore within the Era ruins, the Reliquary, the Archives, and the Mausoleum. All three locations must be explored to find all starling shards. Choose which area to explore first and reference the appropriate pages.''',
              buttons: [
                EncounterDialogButton(
                    title: 'Reliquary', milestone: '_selected_reliquary'),
                EncounterDialogButton(
                    title: 'Archives', milestone: '_selected_archives'),
                EncounterDialogButton(
                    title: 'Mausoleum', milestone: '_selected_mausoleum'),
              ]),
          EncounterDialogDef(
              title: 'Reliquary Completed',
              body: '''Choose which room to go to next.''',
              buttons: [
                EncounterDialogButton(
                    title: 'Archives', milestone: '_selected_archives'),
                EncounterDialogButton(
                    title: 'Mausoleum', milestone: '_selected_mausoleum'),
              ]),
          EncounterDialogDef(
              title: 'Archives Completed',
              body: '''Choose which room to go to next.''',
              buttons: [
                EncounterDialogButton(
                    title: 'Reliquary', milestone: '_selected_reliquary'),
                EncounterDialogButton(
                    title: 'Mausoleum', milestone: '_selected_mausoleum'),
              ]),
          EncounterDialogDef(
              title: 'Mausoleum Completed',
              body: '''Choose which room to go to next.''',
              buttons: [
                EncounterDialogButton(
                    title: 'Reliquary', milestone: '_selected_reliquary'),
                EncounterDialogButton(
                    title: 'Archives', milestone: '_selected_archives'),
              ]),
        ],
        onLoad: [
          dialog('Choose First Area'),
        ],
        onMilestone: {
          '_selected_reliquary': [
            rules('Reliquary',
                '''Proceed to page X of the monster manual, page Y of the map book, and page Z of the campaign book.
            
The air is electric with potential. A powerful construct is housed here.

Area Victory Condition: One Rover ends the round within [Range] 1 of the Reliquary [A].'''),
            placementGroup('Reliquary'),
            subtitle('Reliquary'),
            victoryCondition(
                'Find three starling shards.\n\nArea Victory Condition: One Rover ends the round within [Range] 1 of the Reliquary [A].'),
            rules('Setup',
                '''Place Rovers in [start] spaces and spawn adversaries according to Rover count as shown on the map. Rover [HP], ether dice, and infusion dice carry over. Glyphs and summons carry over and are placed within [Range] 1 of their owner.'''),
            resetRound(body: 'You have 6 rounds to complete the next area.'),
          ],
          '_reliquary_completed': [
            codex('A Memory of Power'),
            milestone(CampaignMilestone.milestone9dot5Reliquary),
            milestone('_archives_last', conditions: [
              MilestoneCondition('_mausoleum_completed'),
            ]),
            milestone('_mausoleum_last', conditions: [
              MilestoneCondition('_archives_completed'),
            ]),
            dialog('Reliquary Completed', conditions: [
              MilestoneCondition('_archives_last', value: false),
              MilestoneCondition('_mausoleum_last', value: false)
            ]),
          ],
          '_reliquary_last': [
            rules('Reliquary Last',
                '''Proceed to page X of the monster manual, page Y of the map book, and page Z of the campaign book.
                
Area Victory Condition: Slay the Stolen Breath.'''),
            placementGroup('Reliquary Last'),
            subtitle('Reliquary'),
            victoryCondition(
                'Find three starling shards.\n\nArea Victory Condition: Slay the Stolen Breath.'),
            rules('Setup',
                '''Place Rovers in [start] spaces and spawn adversaries according to Rover count as shown on the map. Rover [HP], ether dice, and infusion dice carry over. Glyphs and summons carry over and are placed within [Range] 1 of their owner.'''),
            resetRound(body: 'You have 6 rounds to complete the next area.'),
          ],
          '_selected_archives': [
            rules('Archives',
                '''Proceed to page X of the monster manual, page Y of the map book, and page Z of the campaign book.
            
The great chamber is eerily silent, as if the room itself holds its breath.

Area Victory Condition: One Rover ends the round within [Range] 1 of the Archive [A].'''),
            placementGroup('Archives'),
            subtitle('Archives'),
            victoryCondition(
                'Find three starling shards.\n\nArea Victory Condition: One Rover ends the round within [Range] 1 of the Archive [A].'),
            rules('Setup',
                '''Place Rovers in [start] spaces and spawn adversaries according to Rover count as shown on the map. Rover [HP], ether dice, and infusion dice carry over. Glyphs and summons carry over and are placed within [Range] 1 of their owner.'''),
            resetRound(body: 'You have 6 rounds to complete the next area.'),
          ],
          '_archives_completed': [
            codex('A Memory of Power'),
            milestone(CampaignMilestone.milestone9dot5Reliquary),
            milestone('_reliquary_last', conditions: [
              MilestoneCondition('_mausoleum_completed'),
            ]),
            milestone('_mausoleum_last', conditions: [
              MilestoneCondition('_reliquary_completed'),
            ]),
            dialog('Archives Completed', conditions: [
              MilestoneCondition('_reliquary_last', value: false),
              MilestoneCondition('_mausoleum_last', value: false)
            ]),
          ],
          '_archives_last': [
            rules('Archives Last',
                '''Proceed to page X of the monster manual, page Y of the map book, and page Z of the campaign book.

Area Victory Condition: Slay the Piercing Gaze.'''),
            placementGroup('Archives Last'),
            subtitle('Archives'),
            victoryCondition(
                'Find three starling shards.\n\nArea Victory Condition: Slay the Piercing Gaze.'),
            rules('Setup',
                '''Place Rovers in [start] spaces and spawn adversaries according to Rover count as shown on the map. Rover [HP], ether dice, and infusion dice carry over. Glyphs and summons carry over and are placed within [Range] 1 of their owner.'''),
            resetRound(body: 'You have 6 rounds to complete the next area.'),
          ],
          '_selected_mausoleum': [
            rules('Mausoleum',
                '''Proceed to page X of the monster manual, page Y of the map book, and page Z of the campaign book.

The great chamber is eerily silent, as if the room itself holds its breath.

Area Victory Condition: One Rover ends the round within [Range] 1 of grave marker [A].'''),
            placementGroup('Mausoleum'),
            subtitle('Mausoleum'),
            victoryCondition(
                'Find three starling shards.\n\nArea Victory Condition: One Rover ends the round within [Range] 1 of grave marker [A].'),
            rules('Setup',
                '''Place Rovers in [start] spaces and spawn adversaries according to Rover count as shown on the map. Rover [HP], ether dice, and infusion dice carry over. Glyphs and summons carry over and are placed within [Range] 1 of their owner.'''),
            resetRound(body: 'You have 6 rounds to complete the next area.'),
          ],
          '_mausoleum_completed': [
            codex('A Memory of Power'),
            milestone(CampaignMilestone.milestone9dot5Mausoleum),
            milestone('_reliquary_last', conditions: [
              MilestoneCondition('_archives_completed'),
            ]),
            milestone('_archives_last', conditions: [
              MilestoneCondition('_reliquary_completed'),
            ]),
            dialog('Mausoleum Completed', conditions: [
              MilestoneCondition('_reliquary_last', value: false),
              MilestoneCondition('_archives_last', value: false)
            ]),
          ],
          '_mausoleum_last': [
            rules('Mausoleum Last',
                '''Proceed to page X of the monster manual, page Y of the map book, and page Z of the campaign book.

Area Victory Condition: Slay the Heavy Hand.'''),
            placementGroup('Mausoleum Last'),
            subtitle('Mausoleum'),
            victoryCondition(
                'Find three starling shards.\n\nArea Victory Condition: Slay the Heavy Hand.'),
            rules('Setup',
                '''Place Rovers in [start] spaces and spawn adversaries according to Rover count as shown on the map. Rover [HP], ether dice, and infusion dice carry over. Glyphs and summons carry over and are placed within [Range] 1 of their owner.'''),
            resetRound(body: 'You have 6 rounds to complete the next area.'),
          ],
          '_victory': [
            codex('We Have Need of Your Knowledge One Last Time'),
            victory(),
            dialog(null,
                title: 'Ethereal Items',
                body:
                    '''Rover may choose one of two items, the “Ethereal Catena” or the “Ethereal Aegis”. These are unique party items. They do not take up an equipment slot and all Rovers benefit from their passive effect.''')
          ],
        },
        startingMap: MapDef.empty(),
        adversaries: [
          EncounterFigureDef(
            name: 'Kifa',
            letter: 'A',
            health: 8,
            flies: true,
            affinities: {
              Ether.wind: 2,
              Ether.earth: 2,
              Ether.fire: -1,
              Ether.water: -1,
            },
          ),
          EncounterFigureDef(
            name: 'Harrow',
            letter: 'B',
            health: 18,
            affinities: {
              Ether.morph: 2,
              Ether.crux: 2,
            },
          ),
          EncounterFigureDef(
            name: 'Stormcaller',
            letter: 'B',
            health: 15,
            flies: true,
            traits: [
              'This unit gains [DEF] 2 against [r_attack] targeting it.',
            ],
            affinities: {
              Ether.wind: 2,
              Ether.crux: 2,
              Ether.water: 1,
              Ether.morph: -1,
              Ether.fire: -1,
              Ether.earth: -2,
            },
          ),
          EncounterFigureDef(
            name: 'Stolen Breath',
            letter: 'C',
            healthFormula: '8*R',
            flies: true,
            affinities: {
              Ether.earth: -2,
              Ether.morph: 1,
              Ether.water: 1,
              Ether.crux: 2,
              Ether.wind: 2,
            },
            onSlain: [
              milestone('_victory'),
            ],
          ),
          EncounterFigureDef(
            name: 'Briarwog',
            letter: 'A',
            health: 10,
            traits: [
              '[React] After this unit is attacked from within [Range] 1: The attacker suffers [DMG]1.',
            ],
            affinities: {
              Ether.water: 2,
              Ether.morph: 1,
              Ether.earth: -1,
              Ether.fire: -1,
            },
          ),
          EncounterFigureDef(
            name: 'Courslayer',
            health: 15,
            affinities: {
              Ether.wind: 2,
              Ether.water: 2,
              Ether.fire: -1,
              Ether.earth: -1,
            },
          ),
          EncounterFigureDef(
            name: 'Piercing Gaze',
            letter: 'C',
            healthFormula: '8*R',
            affinities: {
              Ether.water: 2,
              Ether.wind: 2,
              Ether.earth: -1,
              Ether.fire: -1,
            },
            onSlain: [
              milestone('_victory'),
            ],
          ),
          EncounterFigureDef(
            name: 'Wrathbone',
            health: 20,
            traits: [
              '[React] At the end of the Rover phase: All enemies within [Range] 1-2 suffer [DMG]1. << Enemies within [Range] 1 suffer an additional [DMG]1.',
            ],
            affinities: {
              Ether.fire: 2,
              Ether.earth: 1,
              Ether.water: -2,
            },
          ),
          EncounterFigureDef(
            name: 'Heavy Hand',
            letter: 'C',
            healthFormula: '10*R',
            affinities: {
              Ether.morph: 2,
              Ether.crux: 2,
            },
            onSlain: [
              milestone('_victory'),
            ],
          ),
        ],
        placements: const [],
        placementGroups: [
          PlacementGroupDef(
            name: 'Reliquary',
            map: MapDef(
              id: '9.5.reliquary',
              columnCount: 13,
              rowCount: 11,
              backgroundRect: Rect.fromLTWH(110.0, 44.0, 1481.0, 1411.0),
              starts: [
                (0, 8),
                (0, 9),
                (1, 9),
                (1, 10),
                (2, 9),
                (3, 10),
              ],
              terrain: {
                (0, 4): TerrainType.difficult,
                (1, 2): TerrainType.barrier,
                (1, 8): TerrainType.difficult,
                (2, 1): TerrainType.barrier,
                (2, 2): TerrainType.object,
                (3, 2): TerrainType.barrier,
                (4, 5): TerrainType.difficult,
                (4, 9): TerrainType.difficult,
                (5, 5): TerrainType.difficult,
                (5, 6): TerrainType.difficult,
                (6, 1): TerrainType.object,
                (6, 5): TerrainType.difficult,
                (8, 0): TerrainType.barrier,
                (8, 7): TerrainType.object,
                (9, 0): TerrainType.barrier,
                (9, 1): TerrainType.object,
                (9, 10): TerrainType.object,
                (10, 0): TerrainType.barrier,
                (10, 4): TerrainType.barrier,
                (10, 9): TerrainType.difficult,
                (11, 4): TerrainType.barrier,
                (11, 5): TerrainType.object,
                (11, 10): TerrainType.object,
                (12, 4): TerrainType.barrier,
                (12, 8): TerrainType.object,
                (12, 9): TerrainType.object,
              },
            ),
            placements: [
              PlacementDef(name: 'Kifa', c: 0, r: 0, minPlayers: 4),
              PlacementDef(name: 'Kifa', c: 4, r: 0, minPlayers: 3),
              PlacementDef(name: 'Kifa', c: 11, r: 3, minPlayers: 3),
              PlacementDef(name: 'Kifa', c: 0, r: 3),
              PlacementDef(name: 'Kifa', c: 10, r: 8),
              PlacementDef(name: 'Kifa', c: 7, r: 10, minPlayers: 4),
              PlacementDef(name: 'Harrow', c: 4, r: 3),
              PlacementDef(name: 'Harrow', c: 10, r: 5),
              PlacementDef(name: 'Harrow', c: 7, r: 2, minPlayers: 3),
              PlacementDef(name: 'Harrow', c: 4, r: 6, minPlayers: 4),
              PlacementDef(name: 'Stormcaller', c: 7, r: 4),
              PlacementDef(
                  name: 'Magic',
                  type: PlacementType.trap,
                  c: 2,
                  r: 3,
                  trapDamage: 3),
              PlacementDef(
                  name: 'Magic',
                  type: PlacementType.trap,
                  c: 9,
                  r: 2,
                  trapDamage: 3),
              PlacementDef(
                  name: 'Magic',
                  type: PlacementType.trap,
                  c: 11,
                  r: 6,
                  trapDamage: 3),
              PlacementDef(name: 'crux', type: PlacementType.ether, c: 6, r: 1),
              PlacementDef(name: 'wind', type: PlacementType.ether, c: 8, r: 7),
              PlacementDef(
                  name: '[A]', type: PlacementType.feature, c: 9, r: 1),
            ],
          ),
          PlacementGroupDef(
            name: 'Reliquary Last',
            map: MapDef(
              id: '9.5.reliquary.last',
              columnCount: 13,
              rowCount: 11,
              backgroundRect: Rect.fromLTWH(124.0, 44.0, 1481.0, 1411.0),
              starts: [
                (0, 8),
                (0, 9),
                (1, 9),
                (1, 10),
                (2, 9),
                (3, 10),
              ],
              terrain: {
                (0, 4): TerrainType.difficult,
                (1, 2): TerrainType.barrier,
                (1, 8): TerrainType.difficult,
                (2, 1): TerrainType.barrier,
                (2, 2): TerrainType.object,
                (3, 2): TerrainType.barrier,
                (4, 5): TerrainType.difficult,
                (4, 9): TerrainType.difficult,
                (5, 5): TerrainType.difficult,
                (5, 6): TerrainType.difficult,
                (6, 1): TerrainType.object,
                (6, 5): TerrainType.difficult,
                (8, 0): TerrainType.barrier,
                (8, 7): TerrainType.object,
                (9, 0): TerrainType.barrier,
                (9, 1): TerrainType.object,
                (9, 10): TerrainType.object,
                (10, 0): TerrainType.barrier,
                (10, 4): TerrainType.barrier,
                (10, 9): TerrainType.difficult,
                (11, 4): TerrainType.barrier,
                (11, 5): TerrainType.object,
                (11, 10): TerrainType.object,
                (12, 4): TerrainType.barrier,
                (12, 8): TerrainType.object,
                (12, 9): TerrainType.object,
              },
            ),
            placements: [
              PlacementDef(name: 'Kifa', c: 0, r: 3),
              PlacementDef(name: 'Kifa', c: 7, r: 10, minPlayers: 4),
              PlacementDef(name: 'Kifa', c: 10, r: 8),
              PlacementDef(name: 'Kifa', c: 11, r: 3, minPlayers: 3),
              PlacementDef(name: 'Harrow', c: 4, r: 3),
              PlacementDef(name: 'Harrow', c: 4, r: 6, minPlayers: 4),
              PlacementDef(name: 'Harrow', c: 7, r: 2, minPlayers: 3),
              PlacementDef(name: 'Harrow', c: 10, r: 5),
              PlacementDef(name: 'Stolen Breath', c: 9, r: 2),
              PlacementDef(
                  name: 'Magic',
                  type: PlacementType.trap,
                  c: 2,
                  r: 3,
                  trapDamage: 3),
              PlacementDef(
                  name: 'Magic',
                  type: PlacementType.trap,
                  c: 11,
                  r: 6,
                  trapDamage: 3),
              PlacementDef(name: 'crux', type: PlacementType.ether, c: 6, r: 1),
              PlacementDef(name: 'wind', type: PlacementType.ether, c: 8, r: 7),
            ],
          ),
          PlacementGroupDef(
            name: 'Archives',
            map: MapDef(
              id: '9.5.archives',
              columnCount: 13,
              rowCount: 11,
              backgroundRect: Rect.fromLTWH(125.0, 44.0, 1481.0, 1411.0),
              starts: [
                (10, 9),
                (11, 9),
                (11, 10),
                (12, 8),
                (12, 9),
              ],
              terrain: {
                (0, 0): TerrainType.object,
                (0, 1): TerrainType.object,
                (1, 0): TerrainType.object,
                (2, 1): TerrainType.barrier,
                (2, 2): TerrainType.barrier,
                (2, 3): TerrainType.difficult,
                (2, 6): TerrainType.object,
                (2, 7): TerrainType.barrier,
                (2, 8): TerrainType.object,
                (3, 5): TerrainType.difficult,
                (5, 4): TerrainType.barrier,
                (5, 5): TerrainType.object,
                (5, 6): TerrainType.barrier,
                (5, 9): TerrainType.object,
                (5, 10): TerrainType.difficult,
                (6, 9): TerrainType.difficult,
                (7, 1): TerrainType.barrier,
                (7, 2): TerrainType.object,
                (7, 3): TerrainType.object,
                (8, 4): TerrainType.difficult,
                (8, 6): TerrainType.barrier,
                (8, 7): TerrainType.barrier,
                (8, 8): TerrainType.barrier,
                (10, 2): TerrainType.barrier,
                (10, 3): TerrainType.difficult,
                (10, 4): TerrainType.barrier,
                (10, 7): TerrainType.object,
                (11, 0): TerrainType.object,
                (12, 0): TerrainType.object,
                (12, 5): TerrainType.difficult,
              },
            ),
            placements: [
              PlacementDef(name: 'Briarwog', c: 5, r: 1),
              PlacementDef(name: 'Briarwog', c: 9, r: 0, minPlayers: 4),
              PlacementDef(name: 'Briarwog', c: 8, r: 3, minPlayers: 4),
              PlacementDef(name: 'Briarwog', c: 0, r: 4, minPlayers: 3),
              PlacementDef(name: 'Briarwog', c: 3, r: 6),
              PlacementDef(name: 'Briarwog', c: 7, r: 5, minPlayers: 3),
              PlacementDef(name: 'Stormcaller', c: 1, r: 7, minPlayers: 4),
              PlacementDef(name: 'Stormcaller', c: 3, r: 3, minPlayers: 3),
              PlacementDef(name: 'Stormcaller', c: 11, r: 2),
              PlacementDef(name: 'Stormcaller', c: 5, r: 8),
              PlacementDef(name: 'Courslayer', c: 7, r: 4),
              PlacementDef(
                  name: 'Magic',
                  type: PlacementType.trap,
                  c: 3,
                  r: 9,
                  trapDamage: 3),
              PlacementDef(
                  name: 'Magic',
                  type: PlacementType.trap,
                  c: 3,
                  r: 2,
                  trapDamage: 3),
              PlacementDef(
                  name: 'Magic',
                  type: PlacementType.trap,
                  c: 8,
                  r: 0,
                  trapDamage: 3),
              PlacementDef(name: 'fire', type: PlacementType.ether, c: 5, r: 5),
              PlacementDef(
                  name: 'water', type: PlacementType.ether, c: 10, r: 7),
              PlacementDef(
                  name: '[A]', type: PlacementType.feature, c: 2, r: 1),
            ],
          ),
          PlacementGroupDef(
            name: 'Archives Last',
            map: MapDef(
              id: '9.5.archives.last',
              columnCount: 13,
              rowCount: 11,
              backgroundRect: Rect.fromLTWH(110.0, 44.0, 1481.0, 1411.0),
              starts: [
                (10, 9),
                (11, 9),
                (11, 10),
                (12, 8),
                (12, 9),
              ],
              terrain: {
                (0, 0): TerrainType.object,
                (0, 1): TerrainType.object,
                (1, 0): TerrainType.object,
                (2, 1): TerrainType.barrier,
                (2, 2): TerrainType.barrier,
                (2, 3): TerrainType.difficult,
                (2, 6): TerrainType.object,
                (2, 7): TerrainType.barrier,
                (2, 8): TerrainType.object,
                (3, 5): TerrainType.difficult,
                (5, 4): TerrainType.barrier,
                (5, 5): TerrainType.object,
                (5, 6): TerrainType.barrier,
                (5, 9): TerrainType.object,
                (5, 10): TerrainType.difficult,
                (6, 9): TerrainType.difficult,
                (7, 1): TerrainType.barrier,
                (7, 2): TerrainType.object,
                (7, 3): TerrainType.object,
                (8, 4): TerrainType.difficult,
                (8, 6): TerrainType.barrier,
                (8, 7): TerrainType.barrier,
                (8, 8): TerrainType.barrier,
                (10, 2): TerrainType.barrier,
                (10, 3): TerrainType.difficult,
                (10, 4): TerrainType.barrier,
                (10, 7): TerrainType.object,
                (11, 0): TerrainType.object,
                (12, 0): TerrainType.object,
                (12, 5): TerrainType.difficult,
              },
            ),
            placements: [
              PlacementDef(name: 'Briarwog', c: 7, r: 5, minPlayers: 3),
              PlacementDef(name: 'Briarwog', c: 8, r: 3, minPlayers: 4),
              PlacementDef(name: 'Briarwog', c: 5, r: 1),
              PlacementDef(name: 'Briarwog', c: 3, r: 6),
              PlacementDef(name: 'Stormcaller', c: 11, r: 2),
              PlacementDef(name: 'Stormcaller', c: 5, r: 8),
              PlacementDef(name: 'Stormcaller', c: 1, r: 7, minPlayers: 4),
              PlacementDef(name: 'Stormcaller', c: 7, r: 4),
              PlacementDef(name: 'Piercing Gaze', c: 3, r: 2),
              PlacementDef(
                  name: 'Magic',
                  type: PlacementType.trap,
                  c: 3,
                  r: 9,
                  trapDamage: 3),
              PlacementDef(
                  name: 'Magic',
                  type: PlacementType.trap,
                  c: 8,
                  r: 0,
                  trapDamage: 3),
              PlacementDef(
                  name: 'water', type: PlacementType.ether, c: 10, r: 7),
              PlacementDef(name: 'fire', type: PlacementType.ether, c: 5, r: 5),
            ],
          ),
          PlacementGroupDef(
            name: 'Mausoleum',
            map: MapDef(
              id: '9.5.mausoleum',
              columnCount: 13,
              rowCount: 11,
              backgroundRect: Rect.fromLTWH(110.0, 44.0, 1481.0, 1411.0),
              starts: [
                (4, 0),
                (5, 0),
                (6, 0),
                (7, 0),
                (8, 0),
              ],
              terrain: {
                (0, 0): TerrainType.difficult,
                (1, 0): TerrainType.difficult,
                (1, 3): TerrainType.object,
                (1, 5): TerrainType.object,
                (1, 7): TerrainType.difficult,
                (4, 3): TerrainType.object,
                (4, 6): TerrainType.difficult,
                (5, 4): TerrainType.object,
                (5, 7): TerrainType.difficult,
                (6, 3): TerrainType.object,
                (6, 6): TerrainType.object,
                (6, 9): TerrainType.object,
                (7, 4): TerrainType.difficult,
                (7, 7): TerrainType.object,
                (8, 3): TerrainType.difficult,
                (8, 6): TerrainType.object,
                (8, 9): TerrainType.object,
                (11, 3): TerrainType.object,
                (11, 5): TerrainType.difficult,
                (11, 7): TerrainType.object,
                (11, 10): TerrainType.object,
                (12, 9): TerrainType.object,
              },
            ),
            placements: [
              PlacementDef(name: 'Wrathbone', c: 3, r: 8),
              PlacementDef(name: 'Wrathbone', c: 10, r: 8, minPlayers: 3),
              PlacementDef(name: 'Wrathbone', c: 12, r: 1, minPlayers: 4),
              PlacementDef(name: 'Courslayer', c: 1, r: 4),
              PlacementDef(name: 'Courslayer', c: 0, r: 2, minPlayers: 4),
              PlacementDef(name: 'Courslayer', c: 6, r: 4, minPlayers: 3),
              PlacementDef(name: 'Courslayer', c: 10, r: 5),
              PlacementDef(name: 'Harrow', c: 9, r: 7),
              PlacementDef(
                  name: 'Magic',
                  type: PlacementType.trap,
                  c: 1,
                  r: 6,
                  trapDamage: 3),
              PlacementDef(
                  name: 'Magic',
                  type: PlacementType.trap,
                  c: 6,
                  r: 8,
                  trapDamage: 3),
              PlacementDef(
                  name: 'Magic',
                  type: PlacementType.trap,
                  c: 11,
                  r: 4,
                  trapDamage: 3),
              PlacementDef(
                  name: 'morph', type: PlacementType.ether, c: 6, r: 6),
              PlacementDef(
                  name: 'earth', type: PlacementType.ether, c: 6, r: 3),
              PlacementDef(
                  name: '[A]', type: PlacementType.feature, c: 6, r: 9),
            ],
          ),
          PlacementGroupDef(
            name: 'Mausoleum Last',
            map: MapDef(
              id: '9.5.mausoleum.last',
              columnCount: 13,
              rowCount: 11,
              backgroundRect: Rect.fromLTWH(125.0, 44.0, 1481.0, 1411.0),
              starts: [
                (4, 0),
                (5, 0),
                (6, 0),
                (7, 0),
                (8, 0),
              ],
              terrain: {
                (0, 0): TerrainType.difficult,
                (1, 0): TerrainType.difficult,
                (1, 3): TerrainType.object,
                (1, 5): TerrainType.object,
                (1, 7): TerrainType.difficult,
                (4, 3): TerrainType.object,
                (4, 6): TerrainType.difficult,
                (4, 9): TerrainType.difficult,
                (5, 4): TerrainType.object,
                (5, 7): TerrainType.difficult,
                (6, 3): TerrainType.object,
                (6, 6): TerrainType.object,
                (6, 9): TerrainType.object,
                (7, 4): TerrainType.difficult,
                (8, 3): TerrainType.difficult,
                (8, 9): TerrainType.object,
                (11, 3): TerrainType.object,
                (11, 5): TerrainType.difficult,
                (11, 7): TerrainType.object,
                (11, 10): TerrainType.object,
                (12, 9): TerrainType.object,
              },
            ),
            placements: [
              PlacementDef(name: 'Wrathbone', c: 3, r: 8),
              PlacementDef(name: 'Wrathbone', c: 10, r: 8, minPlayers: 3),
              PlacementDef(name: 'Wrathbone', c: 12, r: 1, minPlayers: 4),
              PlacementDef(name: 'Courslayer', c: 1, r: 4),
              PlacementDef(name: 'Courslayer', c: 6, r: 4, minPlayers: 3),
              PlacementDef(name: 'Courslayer', c: 10, r: 5),
              PlacementDef(name: 'Courslayer', c: 0, r: 2, minPlayers: 4),
              PlacementDef(name: 'Heavy Hand', c: 6, r: 8),
              PlacementDef(
                  name: 'Magic',
                  type: PlacementType.trap,
                  c: 1,
                  r: 6,
                  trapDamage: 3),
              PlacementDef(
                  name: 'Magic',
                  type: PlacementType.trap,
                  c: 11,
                  r: 4,
                  trapDamage: 3),
              PlacementDef(
                  name: 'earth', type: PlacementType.ether, c: 6, r: 3),
              PlacementDef(
                  name: 'morph', type: PlacementType.ether, c: 6, r: 6),
            ],
          ),
        ],
      );

  static EncounterDef get encounter9dot6 => EncounterDef(
      questId: '9',
      number: '6',
      title: 'Something Worth Wishing For',
      victoryDescription: 'Slay Eclipse.',
      roundLimit: 99,
      baseLystReward: 0,
      milestone: CampaignMilestone.milestone9dot6,
      challenges: [
        'Each time a Rover places an ether field in an enemy space, they place the same ether field in their own space.',
        'After Eclipse attacks a Rover, that Rover must reroll all non-[DIM] dice in their personal and infusion pools.',
        'Rovers suffer [DMG]1 each time they generate an ether dice.',
      ],
      onLoad: [
        rules('Vengeance',
            '''*Eclipse is a cruel and unrelenting fighter*. This encounter does not have a round limit, but you will still have to keep track of rounds. On every 4th round, Eclipse gains +1 [DMG] to all attacks they perform. This is an accumulative bonus, meaning on the 8th round this bonus is +2 [DMG], on the 12th round the bonus is +3 [DMG], etc.'''),
        rules('Invincible',
            '''*Eclipse has absorbed an unhealthy amount of ether, making themselves nearly invincible.* To stand a chance of taking down Eclipse you will have to sever their connection to the Ether Lodestone. To do this, you’ll have to place [DIM] dice onto R*2 Ether Lodestone spaces. Each Ether Lodestone space can only have one [DIM] dice on it. Rovers gain two new abilities for this phase:

**Drain Ether**: Return one of your ether dice from your personal pool to the general pool and gain one [DIM] dice.

**Infuse Dim**: Place one [DIM] dice from your personal pool onto an Ether Lodestone space within [Range] 1.

**Note**: **Drain Ether** and **Infuse Dim** are abilities and require an ability activation to use.

Note: [DIM] dice can not be removed from the Ether Lodestone.'''),
      ],
      onMilestone: {
        '_phase3': [
          codex('Loyal to the End'),
          placementGroup('Andiron',
              title: 'Revenge',
              body:
                  '*Andiron has recovered and is back in the fight.* Spawn Andiron, at maximum [HP] and using the large base adapter, as close to space [B] as possible.'),
          rules('Addiction',
              'Eclipse still follows the rules for addiction, grabbing ether dice from ether nodes around the map.'),
          rules('Limitless Rage',
              'Eclipse and Andiron can not be slain, not yet. If either of their [HP] is brought to 0, they are not slain and are not removed from the map. There must be a way to defeat both of them. Keep fighting and look for an opportunity to win.'),
          rules('On Advance',
              'Adversaries in this encounter use the **On Advance** mechanic, which is found on page X of the rulebook.'),
        ],
        '_eclipse_downed': [
          milestone('_phase4',
              condition: MilestoneCondition('_andiron_downed')),
        ],
        '_andiron_downed': [
          milestone('_phase4',
              condition: MilestoneCondition('_eclipse_downed')),
        ],
        '_phase4': [
          removeRule('Limitless Rage'),
          removeRule('Addiction'),
          codex('Take the Ether'),
          remove('Andiron', silent: true),
          remove('Eclipse', silent: true),
          placementGroup('Eclipse Ether Ascended',
              title: 'Eclipse Ether Ascended',
              body:
                  '''Remove Eclipse and Andiron from the map. Spawn Eclipse Ether Ascended, at maximum [HP] and using the large base adapter, as close to space [C] as you can. Place ether dice onto the statistic block of Eclipse Ether Ascended until there is one of each ether type [Fire], [Water], [Earth], [Wind], [Crux], and [Morph].
'''),
          rules('Eclipse',
              '''*Eclipse realizes their power is fading and is growing desperate. They leap back onto the back of Andiron. This is your chance, the shards of ether in their body is radiating extraordinary power. If you can take them, Eclipse should be weak enough to be defeated.*

Once each round, one Rover may perform the following ability:

**Take Ether**: If you are within [Range] 1 of Eclipse Ether Ascended, take one ether dice of your choice from their statistic block and add it to your personal pool.

**Note**: **Take Ether** is an ability and requires an ability activation to use.

Remove all ether dice from Eclipse (Ether Ascended) and reduce their hit points to 0 to slay them.'''),
        ],
        '_victory': [
          remove('Eclipse Ether Ascended', silent: true),
          codex('Eclipsed'),
          victory(),
          dialog(null,
              title: 'Ethereal Items',
              body:
                  '''Remove the party items “Ethereal Catena” and “Ethereal Aegis”. Their power is spent and can no longer be used.'''),
        ],
      },
      onDidStartRound: [
        subtitle('Vengeance: +1 [DMG]', condition: RoundCondition(4)),
        subtitle('Vengeance: +2 [DMG]', condition: RoundCondition(8)),
        subtitle('Vengeance: +3 [DMG]', condition: RoundCondition(12)),
        subtitle('Vengeance: +4 [DMG]', condition: RoundCondition(16)),
        subtitle('Vengeance: +5 [DMG]', condition: RoundCondition(20)),
        subtitle('Vengeance: +6 [DMG]', condition: RoundCondition(24)),
        subtitle('Vengeance: +7 [DMG]', condition: RoundCondition(28)),
        subtitle('Vengeance: +8 [DMG]', condition: RoundCondition(32)),
        subtitle('Vengeance: +9 [DMG]', condition: RoundCondition(36)),
        subtitle('Vengeance: +10 [DMG]', condition: RoundCondition(40)),
        subtitle('Vengeance: +11 [DMG]', condition: RoundCondition(44)),
        subtitle('Vengeance: +12 [DMG]', condition: RoundCondition(48)),
        subtitle('Vengeance: +13 [DMG]', condition: RoundCondition(52)),
        subtitle('Vengeance: +14 [DMG]', condition: RoundCondition(56)),
        subtitle('Vengeance: +15 [DMG]', condition: RoundCondition(60)),
        subtitle('Vengeance: +16 [DMG]', condition: RoundCondition(64)),
        subtitle('Vengeance: +17 [DMG]', condition: RoundCondition(68)),
        subtitle('Vengeance: +18 [DMG]', condition: RoundCondition(72)),
        subtitle('Vengeance: +19 [DMG]', condition: RoundCondition(76)),
        subtitle('Vengeance: +20 [DMG]', condition: RoundCondition(80)),
      ],
      startingMap: MapDef(
        id: '9.6',
        columnCount: 13,
        rowCount: 11,
        backgroundRect: Rect.fromLTWH(110.0, 44.0, 1481.0, 1411.0),
        starts: [
          (0, 3),
          (0, 5),
          (4, 0),
          (4, 9),
          (8, 0),
          (8, 9),
          (12, 3),
          (12, 5),
        ],
        terrain: {
          (0, 1): TerrainType.object,
          (0, 7): TerrainType.object,
          (3, 6): TerrainType.object,
          (4, 5): TerrainType.object,
          (4, 6): TerrainType.object,
          (5, 4): TerrainType.object,
          (5, 5): TerrainType.object,
          (5, 6): TerrainType.object,
          (5, 7): TerrainType.object,
          (6, 0): TerrainType.object,
          (6, 3): TerrainType.object,
          (6, 4): TerrainType.object,
          (6, 5): TerrainType.object,
          (6, 6): TerrainType.object,
          (6, 9): TerrainType.object,
          (7, 3): TerrainType.object,
          (7, 4): TerrainType.object,
          (7, 5): TerrainType.object,
          (12, 1): TerrainType.object,
          (12, 7): TerrainType.object,
        },
      ),
      overlays: [
        EncounterFigureDef(
          name: 'Dim',
          alias: 'Ether Lodestone',
          large: true,
          possibleTokens: [
            'RxDim',
            'RxDim',
          ],
          onWillEndRound: [
            milestone('_phase2', condition: TokenCountCondition('2*R')),
          ],
        )
      ],
      adversaries: [
        EncounterFigureDef(
          name: 'Eclipse Mounted',
          healthFormula: '25*R',
          defense: 2,
          large: true,
          unslayable: true,
          traits: [
            'This unit is immune to all damage.',
          ],
          affinities: {
            Ether.fire: 1,
            Ether.wind: 1,
            Ether.water: 1,
            Ether.earth: 1,
            Ether.morph: 2,
            Ether.crux: 2,
          },
          onMilestone: {
            '_phase2': [
              removeRule('Invincible'),
              remove('Ether Lodestone', silent: true),
              codex('Severed Connection'),
              replace('Eclipse',
                  title: 'Eclipse',
                  body:
                      '''Remove Eclipse Mounted from the map. Spawn Eclipse, at maximum [HP] and using a normal one hex base, as close to space [A] as possible.'''),
              rules('Addiction',
                  '''*You have blown The Eclipse from off the back of Andiron. They are desperate to regain what they have lost.*

If an ether node has had its ether dice removed, replace that ether dice. If a unit occupies the space of an inactive ether node, move that unit out of the space, but as close as possible to the now active ether node.

If Eclipse ends their turn within [Range] 1 of an active ether node, take the ether dice from that node and place it on their statistic block.'''),
              rules('Limitless Rage',
                  'Eclipse can not be slain, not yet. If their [HP] is brought to 0, they are not slain and are not removed from the map. There must be a way to defeat them. Keep fighting and look for an opportunity to win.'),
            ]
          },
        ),
        EncounterFigureDef(
          name: 'Eclipse',
          healthFormula: '20*R',
          defense: 1,
          unslayable: true,
          possibleTokens: [
            Ether.fire.label,
            Ether.water.label,
            Ether.wind.label,
            Ether.earth.label,
            Ether.crux.label,
            Ether.morph.label,
          ],
          traits: [
            'For each ether dice on their statistic block, The Eclipse gains the a bonus.',
            '[Fire]: At end of turn, enemies within [Range] 1 suffer [DMG]2',
            '[Water]: +2 movement points',
            '[Wind]: reduce damage suffered by 2 ',
            '[Earth]: At end of turn, recover [RCV] R',
            '[Crux]: +1 [DMG] to all attacks',
            '[Morph]: All enemies within [Range] 1 gain -1 [DMG]',
          ],
          affinities: {
            Ether.fire: 1,
            Ether.wind: 1,
            Ether.morph: 2,
          },
          onWillEndRound: [
            milestone('_phase3', condition: HealthCondition('10*R-X+1')),
            milestone('_eclipse_downed', condition: HealthCondition('R-X+1')),
          ],
        ),
        EncounterFigureDef(
          name: 'Andiron',
          healthFormula: '20*R',
          defense: 1,
          large: true,
          unslayable: true,
          traits: [
            '[React] Eclipse suffers damage caused by a Rover: ||| Logic: Wants to attack the Rover that damaged Eclipse. ||| [Jump] 6 || [m_attack] | [Range] 1 [DMG]4'
          ],
          affinities: {
            Ether.earth: 1,
            Ether.water: 1,
            Ether.crux: 2,
          },
          onWillEndRound: [
            milestone('_andiron_downed', condition: HealthCondition('R-X+1')),
          ],
        ),
        EncounterFigureDef(
          name: 'Eclipse Ether Ascended',
          healthFormula: '35*R',
          defense: 2,
          large: true,
          unslayable: true,
          possibleTokens: [
            Ether.fire.label,
            Ether.water.label,
            Ether.wind.label,
            Ether.earth.label,
            Ether.crux.label,
            Ether.morph.label,
          ],
          startingTokens: [
            Ether.fire.label,
            Ether.water.label,
            Ether.wind.label,
            Ether.earth.label,
            Ether.crux.label,
            Ether.morph.label,
          ],
          traits: [
            'For each ether dice on their statistic block, The Eclipse gains the a bonus.',
            '[Fire]: At end of turn, enemies within [Range] 1 suffer [DMG]2',
            '[Water]: +2 movement points',
            '[Wind]: reduce damage suffered by 2 ',
            '[Earth]: At end of turn, recover [RCV] R',
            '[Crux]: +1 [DMG] to all attacks',
            '[Morph]: All enemies within [Range] 1 gain -1 [DMG]',
          ],
          affinities: {
            Ether.fire: 1,
            Ether.wind: 1,
            Ether.water: 1,
            Ether.earth: 1,
            Ether.morph: 2,
            Ether.crux: 2,
          },
          onWillEndRound: [
            milestone('_victory', conditions: [
              TokenCountCondition('0'),
              HealthCondition('-X+1'),
            ]),
          ],
        ),
      ],
      placements: const [
        PlacementDef(name: 'Eclipse Mounted', c: 9, r: 6),
        PlacementDef(name: 'Dim', type: PlacementType.object, c: 3, r: 6),
        PlacementDef(name: 'fire', type: PlacementType.ether, c: 0, r: 1),
        PlacementDef(name: 'crux', type: PlacementType.ether, c: 6, r: 0),
        PlacementDef(name: 'earth', type: PlacementType.ether, c: 12, r: 1),
        PlacementDef(name: 'morph', type: PlacementType.ether, c: 12, r: 7),
        PlacementDef(name: 'water', type: PlacementType.ether, c: 6, r: 9),
        PlacementDef(name: 'wind', type: PlacementType.ether, c: 0, r: 7),
        PlacementDef(name: '[A]', type: PlacementType.feature, c: 2, r: 8),
        PlacementDef(name: '[B]', type: PlacementType.feature, c: 3, r: 3),
        PlacementDef(name: '[C]', type: PlacementType.feature, c: 9, r: 6),
      ],
      placementGroups: [
        PlacementGroupDef(name: 'Andiron', placements: [
          PlacementDef(name: 'Andiron', c: 3, r: 3),
        ]),
        PlacementGroupDef(name: 'Eclipse Ether Ascended', placements: [
          PlacementDef(
            name: 'Eclipse Ether Ascended',
            c: 9,
            r: 6,
          ),
        ]),
      ]);
}
